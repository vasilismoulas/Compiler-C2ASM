//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/vasil/OneDrive/Έγγραφα/test/Compiler-C2ASM/C2ASM/testlexer.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class testlexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		FUNCTION=1, MAIN=2, RETURN=3, IF=4, ELSE=5, WHILE=6, BREAK=7, PLUS=8, 
		MINUS=9, DIV=10, MULT=11, OR=12, AND=13, NOT=14, EQUAL=15, NEQUAL=16, 
		GT=17, LT=18, GTE=19, LTE=20, QM=21, LP=22, RP=23, LB=24, RB=25, COMMA=26, 
		ASSIGN=27, INT_TYPE=28, DOUBLE_TYPE=29, FLOAT_TYPE=30, CHAR_TYPE=31, VOID_TYPE=32, 
		IDENTIFIER=33, NUMBER=34, CHAR=35, WS=36;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"FUNCTION", "MAIN", "RETURN", "IF", "ELSE", "WHILE", "BREAK", "PLUS", 
		"MINUS", "DIV", "MULT", "OR", "AND", "NOT", "EQUAL", "NEQUAL", "GT", "LT", 
		"GTE", "LTE", "QM", "LP", "RP", "LB", "RB", "COMMA", "ASSIGN", "INT_TYPE", 
		"DOUBLE_TYPE", "FLOAT_TYPE", "CHAR_TYPE", "VOID_TYPE", "IDENTIFIER", "NUMBER", 
		"CHAR", "WS"
	};


	public testlexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public testlexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'function'", "'main'", "'return'", "'if'", "'else'", "'while'", 
		"'break'", "'+'", "'-'", "'/'", "'*'", "'||'", "'&&'", "'!'", "'=='", 
		"'!='", "'>'", "'<'", "'>='", "'<='", "';'", "'('", "')'", "'{'", "'}'", 
		"','", "'='", "'int'", "'double'", "'float'", "'char'", "'void'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FUNCTION", "MAIN", "RETURN", "IF", "ELSE", "WHILE", "BREAK", "PLUS", 
		"MINUS", "DIV", "MULT", "OR", "AND", "NOT", "EQUAL", "NEQUAL", "GT", "LT", 
		"GTE", "LTE", "QM", "LP", "RP", "LB", "RB", "COMMA", "ASSIGN", "INT_TYPE", 
		"DOUBLE_TYPE", "FLOAT_TYPE", "CHAR_TYPE", "VOID_TYPE", "IDENTIFIER", "NUMBER", 
		"CHAR", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "testlexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static testlexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,36,216,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,
		1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,
		1,11,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,
		1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,
		1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,
		1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,
		1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,5,32,190,8,32,10,32,12,32,
		193,9,32,1,33,1,33,5,33,197,8,33,10,33,12,33,200,9,33,1,33,3,33,203,8,
		33,1,34,1,34,1,34,1,34,3,34,209,8,34,1,34,1,34,1,35,1,35,1,35,1,35,0,0,
		36,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
		14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
		26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,1,0,6,3,
		0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,49,57,1,0,48,57,
		2,0,39,39,92,92,3,0,9,10,13,13,32,32,219,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
		0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
		17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
		0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
		0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
		1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
		0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
		1,0,0,0,1,73,1,0,0,0,3,82,1,0,0,0,5,87,1,0,0,0,7,94,1,0,0,0,9,97,1,0,0,
		0,11,102,1,0,0,0,13,108,1,0,0,0,15,114,1,0,0,0,17,116,1,0,0,0,19,118,1,
		0,0,0,21,120,1,0,0,0,23,122,1,0,0,0,25,125,1,0,0,0,27,128,1,0,0,0,29,130,
		1,0,0,0,31,133,1,0,0,0,33,136,1,0,0,0,35,138,1,0,0,0,37,140,1,0,0,0,39,
		143,1,0,0,0,41,146,1,0,0,0,43,148,1,0,0,0,45,150,1,0,0,0,47,152,1,0,0,
		0,49,154,1,0,0,0,51,156,1,0,0,0,53,158,1,0,0,0,55,160,1,0,0,0,57,164,1,
		0,0,0,59,171,1,0,0,0,61,177,1,0,0,0,63,182,1,0,0,0,65,187,1,0,0,0,67,202,
		1,0,0,0,69,204,1,0,0,0,71,212,1,0,0,0,73,74,5,102,0,0,74,75,5,117,0,0,
		75,76,5,110,0,0,76,77,5,99,0,0,77,78,5,116,0,0,78,79,5,105,0,0,79,80,5,
		111,0,0,80,81,5,110,0,0,81,2,1,0,0,0,82,83,5,109,0,0,83,84,5,97,0,0,84,
		85,5,105,0,0,85,86,5,110,0,0,86,4,1,0,0,0,87,88,5,114,0,0,88,89,5,101,
		0,0,89,90,5,116,0,0,90,91,5,117,0,0,91,92,5,114,0,0,92,93,5,110,0,0,93,
		6,1,0,0,0,94,95,5,105,0,0,95,96,5,102,0,0,96,8,1,0,0,0,97,98,5,101,0,0,
		98,99,5,108,0,0,99,100,5,115,0,0,100,101,5,101,0,0,101,10,1,0,0,0,102,
		103,5,119,0,0,103,104,5,104,0,0,104,105,5,105,0,0,105,106,5,108,0,0,106,
		107,5,101,0,0,107,12,1,0,0,0,108,109,5,98,0,0,109,110,5,114,0,0,110,111,
		5,101,0,0,111,112,5,97,0,0,112,113,5,107,0,0,113,14,1,0,0,0,114,115,5,
		43,0,0,115,16,1,0,0,0,116,117,5,45,0,0,117,18,1,0,0,0,118,119,5,47,0,0,
		119,20,1,0,0,0,120,121,5,42,0,0,121,22,1,0,0,0,122,123,5,124,0,0,123,124,
		5,124,0,0,124,24,1,0,0,0,125,126,5,38,0,0,126,127,5,38,0,0,127,26,1,0,
		0,0,128,129,5,33,0,0,129,28,1,0,0,0,130,131,5,61,0,0,131,132,5,61,0,0,
		132,30,1,0,0,0,133,134,5,33,0,0,134,135,5,61,0,0,135,32,1,0,0,0,136,137,
		5,62,0,0,137,34,1,0,0,0,138,139,5,60,0,0,139,36,1,0,0,0,140,141,5,62,0,
		0,141,142,5,61,0,0,142,38,1,0,0,0,143,144,5,60,0,0,144,145,5,61,0,0,145,
		40,1,0,0,0,146,147,5,59,0,0,147,42,1,0,0,0,148,149,5,40,0,0,149,44,1,0,
		0,0,150,151,5,41,0,0,151,46,1,0,0,0,152,153,5,123,0,0,153,48,1,0,0,0,154,
		155,5,125,0,0,155,50,1,0,0,0,156,157,5,44,0,0,157,52,1,0,0,0,158,159,5,
		61,0,0,159,54,1,0,0,0,160,161,5,105,0,0,161,162,5,110,0,0,162,163,5,116,
		0,0,163,56,1,0,0,0,164,165,5,100,0,0,165,166,5,111,0,0,166,167,5,117,0,
		0,167,168,5,98,0,0,168,169,5,108,0,0,169,170,5,101,0,0,170,58,1,0,0,0,
		171,172,5,102,0,0,172,173,5,108,0,0,173,174,5,111,0,0,174,175,5,97,0,0,
		175,176,5,116,0,0,176,60,1,0,0,0,177,178,5,99,0,0,178,179,5,104,0,0,179,
		180,5,97,0,0,180,181,5,114,0,0,181,62,1,0,0,0,182,183,5,118,0,0,183,184,
		5,111,0,0,184,185,5,105,0,0,185,186,5,100,0,0,186,64,1,0,0,0,187,191,7,
		0,0,0,188,190,7,1,0,0,189,188,1,0,0,0,190,193,1,0,0,0,191,189,1,0,0,0,
		191,192,1,0,0,0,192,66,1,0,0,0,193,191,1,0,0,0,194,198,7,2,0,0,195,197,
		7,3,0,0,196,195,1,0,0,0,197,200,1,0,0,0,198,196,1,0,0,0,198,199,1,0,0,
		0,199,203,1,0,0,0,200,198,1,0,0,0,201,203,5,48,0,0,202,194,1,0,0,0,202,
		201,1,0,0,0,203,68,1,0,0,0,204,208,5,39,0,0,205,209,8,4,0,0,206,207,5,
		92,0,0,207,209,9,0,0,0,208,205,1,0,0,0,208,206,1,0,0,0,209,210,1,0,0,0,
		210,211,5,39,0,0,211,70,1,0,0,0,212,213,7,5,0,0,213,214,1,0,0,0,214,215,
		6,35,0,0,215,72,1,0,0,0,5,0,191,198,202,208,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
