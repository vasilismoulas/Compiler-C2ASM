//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/silve/source/comp-2-repos/Compiler-C2ASM/C2ASM/testparser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class testparser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		FUNCTION=1, MAIN=2, RETURN=3, IF=4, ELSE=5, WHILE=6, BREAK=7, PLUS=8, 
		MINUS=9, DIV=10, MULT=11, OR=12, AND=13, NOT=14, EQUAL=15, NEQUAL=16, 
		GT=17, LT=18, GTE=19, LTE=20, QM=21, LP=22, RP=23, LB=24, RB=25, COMMA=26, 
		ASSIGN=27, INT_TYPE=28, DOUBLE_TYPE=29, FLOAT_TYPE=30, CHAR_TYPE=31, VOID_TYPE=32, 
		IDENTIFIER=33, NUMBER=34, CHAR=35, WS=36;
	public const int
		RULE_compileUnit = 0, RULE_globalstatement = 1, RULE_functionDeclaration = 2, 
		RULE_functionDefinition = 3, RULE_funprefix = 4, RULE_functionbody = 5, 
		RULE_statement = 6, RULE_ifstatement = 7, RULE_whilestatement = 8, RULE_compoundStatement = 9, 
		RULE_statementList = 10, RULE_datadeclaration = 11, RULE_datavalue = 12, 
		RULE_typespecifier = 13, RULE_expr = 14, RULE_args = 15, RULE_formalargs = 16;
	public static readonly string[] ruleNames = {
		"compileUnit", "globalstatement", "functionDeclaration", "functionDefinition", 
		"funprefix", "functionbody", "statement", "ifstatement", "whilestatement", 
		"compoundStatement", "statementList", "datadeclaration", "datavalue", 
		"typespecifier", "expr", "args", "formalargs"
	};

	private static readonly string[] _LiteralNames = {
		null, "'function'", "'main'", "'return'", "'if'", "'else'", "'while'", 
		"'break'", "'+'", "'-'", "'/'", "'*'", "'||'", "'&&'", "'!'", "'=='", 
		"'!='", "'>'", "'<'", "'>='", "'<='", "';'", "'('", "')'", "'{'", "'}'", 
		"','", "'='", "'int'", "'double'", "'float'", "'char'", "'void'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FUNCTION", "MAIN", "RETURN", "IF", "ELSE", "WHILE", "BREAK", "PLUS", 
		"MINUS", "DIV", "MULT", "OR", "AND", "NOT", "EQUAL", "NEQUAL", "GT", "LT", 
		"GTE", "LTE", "QM", "LP", "RP", "LB", "RB", "COMMA", "ASSIGN", "INT_TYPE", 
		"DOUBLE_TYPE", "FLOAT_TYPE", "CHAR_TYPE", "VOID_TYPE", "IDENTIFIER", "NUMBER", 
		"CHAR", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "testparser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static testparser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public testparser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public testparser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompileUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext[] functionDefinition() {
			return GetRuleContexts<FunctionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition(int i) {
			return GetRuleContext<FunctionDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalstatementContext[] globalstatement() {
			return GetRuleContexts<GlobalstatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalstatementContext globalstatement(int i) {
			return GetRuleContext<GlobalstatementContext>(i);
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 36;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 34;
					functionDefinition();
					}
					break;
				case 2:
					{
					State = 35;
					globalstatement();
					}
					break;
				}
				}
				State = 38;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8321499136L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM() { return GetToken(testparser.QM, 0); }
		public GlobalstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterGlobalstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitGlobalstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalstatementContext globalstatement() {
		GlobalstatementContext _localctx = new GlobalstatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_globalstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			functionDeclaration();
			State = 41;
			Match(QM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunprefixContext funprefix() {
			return GetRuleContext<FunprefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(testparser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalargsContext formalargs() {
			return GetRuleContext<FormalargsContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			funprefix();
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8321499136L) != 0)) {
				{
				State = 44;
				formalargs();
				}
			}

			State = 47;
			Match(RP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
	 
		public FunctionDefinitionContext() { }
		public virtual void CopyFrom(FunctionDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Custom_FunctionDefinitionContext : FunctionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunprefixContext funprefix() {
			return GetRuleContext<FunprefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(testparser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LB() { return GetToken(testparser.LB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionbodyContext functionbody() {
			return GetRuleContext<FunctionbodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RB() { return GetToken(testparser.RB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalargsContext formalargs() {
			return GetRuleContext<FormalargsContext>(0);
		}
		public Custom_FunctionDefinitionContext(FunctionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterCustom_FunctionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitCustom_FunctionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCustom_FunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_functionDefinition);
		int _la;
		try {
			_localctx = new Custom_FunctionDefinitionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			funprefix();
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8321499136L) != 0)) {
				{
				State = 50;
				formalargs();
				}
			}

			State = 53;
			Match(RP);
			State = 54;
			Match(LB);
			State = 55;
			functionbody();
			State = 56;
			Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunprefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypespecifierContext typespecifier() {
			return GetRuleContext<TypespecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(testparser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(testparser.LP, 0); }
		public FunprefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funprefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterFunprefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitFunprefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunprefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunprefixContext funprefix() {
		FunprefixContext _localctx = new FunprefixContext(Context, State);
		EnterRule(_localctx, 8, RULE_funprefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			typespecifier();
			State = 59;
			Match(IDENTIFIER);
			State = 60;
			Match(LP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionbodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public FunctionbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionbody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterFunctionbody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitFunctionbody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionbody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionbodyContext functionbody() {
		FunctionbodyContext _localctx = new FunctionbodyContext(Context, State);
		EnterRule(_localctx, 10, RULE_functionbody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 68472030168L) != 0)) {
				{
				State = 62;
				statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Statement_DataDeclarationStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatadeclarationContext datadeclaration() {
			return GetRuleContext<DatadeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM() { return GetToken(testparser.QM, 0); }
		public Statement_DataDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterStatement_DataDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitStatement_DataDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_DataDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Statement_IfStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfstatementContext ifstatement() {
			return GetRuleContext<IfstatementContext>(0);
		}
		public Statement_IfStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterStatement_IfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitStatement_IfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_IfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Statement_ReturnStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(testparser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM() { return GetToken(testparser.QM, 0); }
		public Statement_ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterStatement_ReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitStatement_ReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_ReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Statement_WhileStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhilestatementContext whilestatement() {
			return GetRuleContext<WhilestatementContext>(0);
		}
		public Statement_WhileStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterStatement_WhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitStatement_WhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_WhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Statement_ExpressionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM() { return GetToken(testparser.QM, 0); }
		public Statement_ExpressionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterStatement_ExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitStatement_ExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_ExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Statement_CompoundStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public Statement_CompoundStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterStatement_CompoundStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitStatement_CompoundStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_CompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Statement_BreakStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(testparser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM() { return GetToken(testparser.QM, 0); }
		public Statement_BreakStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterStatement_BreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitStatement_BreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_BreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_statement);
		try {
			State = 80;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
			case NOT:
			case LP:
			case IDENTIFIER:
			case NUMBER:
			case CHAR:
				_localctx = new Statement_ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 65;
				expr(0);
				State = 66;
				Match(QM);
				}
				break;
			case IF:
				_localctx = new Statement_IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 68;
				ifstatement();
				}
				break;
			case WHILE:
				_localctx = new Statement_WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 69;
				whilestatement();
				}
				break;
			case LB:
				_localctx = new Statement_CompoundStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 70;
				compoundStatement();
				}
				break;
			case INT_TYPE:
			case DOUBLE_TYPE:
			case FLOAT_TYPE:
			case CHAR_TYPE:
			case VOID_TYPE:
				_localctx = new Statement_DataDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 71;
				datadeclaration();
				State = 72;
				Match(QM);
				}
				break;
			case RETURN:
				_localctx = new Statement_ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 74;
				Match(RETURN);
				State = 75;
				expr(0);
				State = 76;
				Match(QM);
				}
				break;
			case BREAK:
				_localctx = new Statement_BreakStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 78;
				Match(BREAK);
				State = 79;
				Match(QM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(testparser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(testparser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(testparser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(testparser.ELSE, 0); }
		public IfstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterIfstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitIfstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfstatementContext ifstatement() {
		IfstatementContext _localctx = new IfstatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_ifstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			Match(IF);
			State = 83;
			Match(LP);
			State = 84;
			expr(0);
			State = 85;
			Match(RP);
			State = 86;
			statement();
			State = 89;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 87;
				Match(ELSE);
				State = 88;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhilestatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(testparser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(testparser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(testparser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhilestatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whilestatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterWhilestatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitWhilestatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhilestatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhilestatementContext whilestatement() {
		WhilestatementContext _localctx = new WhilestatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_whilestatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			Match(WHILE);
			State = 92;
			Match(LP);
			State = 93;
			expr(0);
			State = 94;
			Match(RP);
			State = 95;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LB() { return GetToken(testparser.LB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RB() { return GetToken(testparser.RB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_compoundStatement);
		try {
			State = 103;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 97;
				Match(LB);
				State = 98;
				Match(RB);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 99;
				Match(LB);
				State = 100;
				statementList();
				State = 101;
				Match(RB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 20, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 105;
				statement();
				}
				}
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 68472030168L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatadeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypespecifierContext typespecifier() {
			return GetRuleContext<TypespecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(testparser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(testparser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DatavalueContext datavalue() {
			return GetRuleContext<DatavalueContext>(0);
		}
		public DatadeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datadeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterDatadeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitDatadeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatadeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatadeclarationContext datadeclaration() {
		DatadeclarationContext _localctx = new DatadeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_datadeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			typespecifier();
			State = 111;
			Match(IDENTIFIER);
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 112;
				Match(ASSIGN);
				State = 113;
				datavalue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatavalueContext : ParserRuleContext {
		public DatavalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datavalue; } }
	 
		public DatavalueContext() { }
		public virtual void CopyFrom(DatavalueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Datavalue_NumberContext : DatavalueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(testparser.NUMBER, 0); }
		public Datavalue_NumberContext(DatavalueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterDatavalue_Number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitDatavalue_Number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatavalue_Number(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Datavalue_CharContext : DatavalueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(testparser.CHAR, 0); }
		public Datavalue_CharContext(DatavalueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterDatavalue_Char(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitDatavalue_Char(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatavalue_Char(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatavalueContext datavalue() {
		DatavalueContext _localctx = new DatavalueContext(Context, State);
		EnterRule(_localctx, 24, RULE_datavalue);
		try {
			State = 118;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				_localctx = new Datavalue_NumberContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 116;
				Match(NUMBER);
				}
				break;
			case CHAR:
				_localctx = new Datavalue_CharContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 117;
				Match(CHAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypespecifierContext : ParserRuleContext {
		public TypespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typespecifier; } }
	 
		public TypespecifierContext() { }
		public virtual void CopyFrom(TypespecifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Typespecifier_IntTypeContext : TypespecifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_TYPE() { return GetToken(testparser.INT_TYPE, 0); }
		public Typespecifier_IntTypeContext(TypespecifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterTypespecifier_IntType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitTypespecifier_IntType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypespecifier_IntType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Typespecifier_DoubleTypeContext : TypespecifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_TYPE() { return GetToken(testparser.DOUBLE_TYPE, 0); }
		public Typespecifier_DoubleTypeContext(TypespecifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterTypespecifier_DoubleType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitTypespecifier_DoubleType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypespecifier_DoubleType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Typespecifier_CharTypeContext : TypespecifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_TYPE() { return GetToken(testparser.CHAR_TYPE, 0); }
		public Typespecifier_CharTypeContext(TypespecifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterTypespecifier_CharType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitTypespecifier_CharType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypespecifier_CharType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Typespecifier_FloatTypeContext : TypespecifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_TYPE() { return GetToken(testparser.FLOAT_TYPE, 0); }
		public Typespecifier_FloatTypeContext(TypespecifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterTypespecifier_FloatType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitTypespecifier_FloatType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypespecifier_FloatType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Typespecifier_VoidTypeContext : TypespecifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID_TYPE() { return GetToken(testparser.VOID_TYPE, 0); }
		public Typespecifier_VoidTypeContext(TypespecifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterTypespecifier_VoidType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitTypespecifier_VoidType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypespecifier_VoidType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypespecifierContext typespecifier() {
		TypespecifierContext _localctx = new TypespecifierContext(Context, State);
		EnterRule(_localctx, 26, RULE_typespecifier);
		try {
			State = 125;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_TYPE:
				_localctx = new Typespecifier_IntTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 120;
				Match(INT_TYPE);
				}
				break;
			case DOUBLE_TYPE:
				_localctx = new Typespecifier_DoubleTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 121;
				Match(DOUBLE_TYPE);
				}
				break;
			case FLOAT_TYPE:
				_localctx = new Typespecifier_FloatTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 122;
				Match(FLOAT_TYPE);
				}
				break;
			case CHAR_TYPE:
				_localctx = new Typespecifier_CharTypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 123;
				Match(CHAR_TYPE);
				}
				break;
			case VOID_TYPE:
				_localctx = new Typespecifier_VoidTypeContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 124;
				Match(VOID_TYPE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Expr_PLUSMINUSContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(testparser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(testparser.MINUS, 0); }
		public Expr_PLUSMINUSContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterExpr_PLUSMINUS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitExpr_PLUSMINUS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_PLUSMINUS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_LTEContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(testparser.LTE, 0); }
		public Expr_LTEContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterExpr_LTE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitExpr_LTE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_LTE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_ASSIGNContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(testparser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(testparser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Expr_ASSIGNContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterExpr_ASSIGN(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitExpr_ASSIGN(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_ASSIGN(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_LTContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(testparser.LT, 0); }
		public Expr_LTContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterExpr_LT(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitExpr_LT(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_LT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_CHARContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(testparser.CHAR, 0); }
		public Expr_CHARContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterExpr_CHAR(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitExpr_CHAR(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_CHAR(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_NUMBERContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(testparser.NUMBER, 0); }
		public Expr_NUMBERContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterExpr_NUMBER(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitExpr_NUMBER(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_NUMBER(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_NEQUALContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQUAL() { return GetToken(testparser.NEQUAL, 0); }
		public Expr_NEQUALContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterExpr_NEQUAL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitExpr_NEQUAL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_NEQUAL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_PLUSContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(testparser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Expr_PLUSContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterExpr_PLUS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitExpr_PLUS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_PLUS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_EQUALContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(testparser.EQUAL, 0); }
		public Expr_EQUALContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterExpr_EQUAL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitExpr_EQUAL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_EQUAL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_GTContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(testparser.GT, 0); }
		public Expr_GTContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterExpr_GT(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitExpr_GT(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_GT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_MULDIVContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(testparser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(testparser.MULT, 0); }
		public Expr_MULDIVContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterExpr_MULDIV(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitExpr_MULDIV(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_MULDIV(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_IDENTIFIERContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(testparser.IDENTIFIER, 0); }
		public Expr_IDENTIFIERContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterExpr_IDENTIFIER(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitExpr_IDENTIFIER(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_IDENTIFIER(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_MINUSContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(testparser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Expr_MINUSContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterExpr_MINUS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitExpr_MINUS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_MINUS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_FCALLContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(testparser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(testparser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(testparser.RP, 0); }
		public Expr_FCALLContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterExpr_FCALL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitExpr_FCALL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_FCALL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_ORContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(testparser.OR, 0); }
		public Expr_ORContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterExpr_OR(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitExpr_OR(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_OR(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_PARENContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(testparser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(testparser.RP, 0); }
		public Expr_PARENContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterExpr_PAREN(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitExpr_PAREN(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_PAREN(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_NOTContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(testparser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Expr_NOTContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterExpr_NOT(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitExpr_NOT(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_NOT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_GTEContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(testparser.GTE, 0); }
		public Expr_GTEContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterExpr_GTE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitExpr_GTE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_GTE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_ANDContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(testparser.AND, 0); }
		public Expr_ANDContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterExpr_AND(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitExpr_AND(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_AND(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				_localctx = new Expr_NUMBERContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 128;
				Match(NUMBER);
				}
				break;
			case 2:
				{
				_localctx = new Expr_IDENTIFIERContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 129;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				{
				_localctx = new Expr_CHARContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 130;
				Match(CHAR);
				}
				break;
			case 4:
				{
				_localctx = new Expr_FCALLContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 131;
				Match(IDENTIFIER);
				State = 132;
				Match(LP);
				State = 133;
				args();
				State = 134;
				Match(RP);
				}
				break;
			case 5:
				{
				_localctx = new Expr_PLUSContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 136;
				Match(PLUS);
				State = 137;
				expr(13);
				}
				break;
			case 6:
				{
				_localctx = new Expr_MINUSContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 138;
				Match(MINUS);
				State = 139;
				expr(12);
				}
				break;
			case 7:
				{
				_localctx = new Expr_PARENContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 140;
				Match(LP);
				State = 141;
				expr(0);
				State = 142;
				Match(RP);
				}
				break;
			case 8:
				{
				_localctx = new Expr_ASSIGNContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 144;
				Match(IDENTIFIER);
				State = 145;
				Match(ASSIGN);
				State = 146;
				expr(10);
				}
				break;
			case 9:
				{
				_localctx = new Expr_NOTContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 147;
				Match(NOT);
				State = 148;
				expr(9);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 183;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 181;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
					case 1:
						{
						_localctx = new Expr_MULDIVContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 151;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 152;
						((Expr_MULDIVContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==DIV || _la==MULT) ) {
							((Expr_MULDIVContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 153;
						expr(16);
						}
						break;
					case 2:
						{
						_localctx = new Expr_PLUSMINUSContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 154;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 155;
						((Expr_PLUSMINUSContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((Expr_PLUSMINUSContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 156;
						expr(15);
						}
						break;
					case 3:
						{
						_localctx = new Expr_ANDContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 157;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 158;
						Match(AND);
						State = 159;
						expr(9);
						}
						break;
					case 4:
						{
						_localctx = new Expr_ORContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 160;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 161;
						Match(OR);
						State = 162;
						expr(8);
						}
						break;
					case 5:
						{
						_localctx = new Expr_GTContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 163;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 164;
						Match(GT);
						State = 165;
						expr(7);
						}
						break;
					case 6:
						{
						_localctx = new Expr_GTEContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 166;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 167;
						Match(GTE);
						State = 168;
						expr(6);
						}
						break;
					case 7:
						{
						_localctx = new Expr_LTContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 169;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 170;
						Match(LT);
						State = 171;
						expr(5);
						}
						break;
					case 8:
						{
						_localctx = new Expr_LTEContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 172;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 173;
						Match(LTE);
						State = 174;
						expr(4);
						}
						break;
					case 9:
						{
						_localctx = new Expr_EQUALContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 175;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 176;
						Match(EQUAL);
						State = 177;
						expr(3);
						}
						break;
					case 10:
						{
						_localctx = new Expr_NEQUALContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 178;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 179;
						Match(NEQUAL);
						State = 180;
						expr(2);
						}
						break;
					}
					} 
				}
				State = 185;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(testparser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(testparser.COMMA, i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 30, RULE_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 186;
				expr(0);
				State = 188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 187;
					Match(COMMA);
					}
				}

				}
				}
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 60133753600L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalargsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatadeclarationContext[] datadeclaration() {
			return GetRuleContexts<DatadeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatadeclarationContext datadeclaration(int i) {
			return GetRuleContext<DatadeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(testparser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(testparser.COMMA, i);
		}
		public FormalargsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalargs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.EnterFormalargs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItestparserListener typedListener = listener as ItestparserListener;
			if (typedListener != null) typedListener.ExitFormalargs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestparserVisitor<TResult> typedVisitor = visitor as ItestparserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalargs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalargsContext formalargs() {
		FormalargsContext _localctx = new FormalargsContext(Context, State);
		EnterRule(_localctx, 32, RULE_formalargs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 194;
				datadeclaration();
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 195;
					Match(COMMA);
					}
				}

				}
				}
				State = 200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8321499136L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 15);
		case 1: return Precpred(Context, 14);
		case 2: return Precpred(Context, 8);
		case 3: return Precpred(Context, 7);
		case 4: return Precpred(Context, 6);
		case 5: return Precpred(Context, 5);
		case 6: return Precpred(Context, 4);
		case 7: return Precpred(Context, 3);
		case 8: return Precpred(Context, 2);
		case 9: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,36,203,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,1,0,1,0,4,0,37,8,0,11,0,12,0,38,1,1,1,1,1,1,1,2,1,
		2,3,2,46,8,2,1,2,1,2,1,3,1,3,3,3,52,8,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,
		4,1,4,1,5,3,5,64,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
		6,1,6,1,6,3,6,81,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,90,8,7,1,8,1,8,1,
		8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,3,9,104,8,9,1,10,4,10,107,8,10,11,
		10,12,10,108,1,11,1,11,1,11,1,11,3,11,115,8,11,1,12,1,12,3,12,119,8,12,
		1,13,1,13,1,13,1,13,1,13,3,13,126,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,3,14,150,8,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,5,14,182,8,14,10,14,12,14,185,9,14,1,15,
		1,15,3,15,189,8,15,4,15,191,8,15,11,15,12,15,192,1,16,1,16,3,16,197,8,
		16,4,16,199,8,16,11,16,12,16,200,1,16,0,1,28,17,0,2,4,6,8,10,12,14,16,
		18,20,22,24,26,28,30,32,0,2,1,0,10,11,1,0,8,9,227,0,36,1,0,0,0,2,40,1,
		0,0,0,4,43,1,0,0,0,6,49,1,0,0,0,8,58,1,0,0,0,10,63,1,0,0,0,12,80,1,0,0,
		0,14,82,1,0,0,0,16,91,1,0,0,0,18,103,1,0,0,0,20,106,1,0,0,0,22,110,1,0,
		0,0,24,118,1,0,0,0,26,125,1,0,0,0,28,149,1,0,0,0,30,190,1,0,0,0,32,198,
		1,0,0,0,34,37,3,6,3,0,35,37,3,2,1,0,36,34,1,0,0,0,36,35,1,0,0,0,37,38,
		1,0,0,0,38,36,1,0,0,0,38,39,1,0,0,0,39,1,1,0,0,0,40,41,3,4,2,0,41,42,5,
		21,0,0,42,3,1,0,0,0,43,45,3,8,4,0,44,46,3,32,16,0,45,44,1,0,0,0,45,46,
		1,0,0,0,46,47,1,0,0,0,47,48,5,23,0,0,48,5,1,0,0,0,49,51,3,8,4,0,50,52,
		3,32,16,0,51,50,1,0,0,0,51,52,1,0,0,0,52,53,1,0,0,0,53,54,5,23,0,0,54,
		55,5,24,0,0,55,56,3,10,5,0,56,57,5,25,0,0,57,7,1,0,0,0,58,59,3,26,13,0,
		59,60,5,33,0,0,60,61,5,22,0,0,61,9,1,0,0,0,62,64,3,12,6,0,63,62,1,0,0,
		0,63,64,1,0,0,0,64,11,1,0,0,0,65,66,3,28,14,0,66,67,5,21,0,0,67,81,1,0,
		0,0,68,81,3,14,7,0,69,81,3,16,8,0,70,81,3,18,9,0,71,72,3,22,11,0,72,73,
		5,21,0,0,73,81,1,0,0,0,74,75,5,3,0,0,75,76,3,28,14,0,76,77,5,21,0,0,77,
		81,1,0,0,0,78,79,5,7,0,0,79,81,5,21,0,0,80,65,1,0,0,0,80,68,1,0,0,0,80,
		69,1,0,0,0,80,70,1,0,0,0,80,71,1,0,0,0,80,74,1,0,0,0,80,78,1,0,0,0,81,
		13,1,0,0,0,82,83,5,4,0,0,83,84,5,22,0,0,84,85,3,28,14,0,85,86,5,23,0,0,
		86,89,3,12,6,0,87,88,5,5,0,0,88,90,3,12,6,0,89,87,1,0,0,0,89,90,1,0,0,
		0,90,15,1,0,0,0,91,92,5,6,0,0,92,93,5,22,0,0,93,94,3,28,14,0,94,95,5,23,
		0,0,95,96,3,12,6,0,96,17,1,0,0,0,97,98,5,24,0,0,98,104,5,25,0,0,99,100,
		5,24,0,0,100,101,3,20,10,0,101,102,5,25,0,0,102,104,1,0,0,0,103,97,1,0,
		0,0,103,99,1,0,0,0,104,19,1,0,0,0,105,107,3,12,6,0,106,105,1,0,0,0,107,
		108,1,0,0,0,108,106,1,0,0,0,108,109,1,0,0,0,109,21,1,0,0,0,110,111,3,26,
		13,0,111,114,5,33,0,0,112,113,5,27,0,0,113,115,3,24,12,0,114,112,1,0,0,
		0,114,115,1,0,0,0,115,23,1,0,0,0,116,119,5,34,0,0,117,119,5,35,0,0,118,
		116,1,0,0,0,118,117,1,0,0,0,119,25,1,0,0,0,120,126,5,28,0,0,121,126,5,
		29,0,0,122,126,5,30,0,0,123,126,5,31,0,0,124,126,5,32,0,0,125,120,1,0,
		0,0,125,121,1,0,0,0,125,122,1,0,0,0,125,123,1,0,0,0,125,124,1,0,0,0,126,
		27,1,0,0,0,127,128,6,14,-1,0,128,150,5,34,0,0,129,150,5,33,0,0,130,150,
		5,35,0,0,131,132,5,33,0,0,132,133,5,22,0,0,133,134,3,30,15,0,134,135,5,
		23,0,0,135,150,1,0,0,0,136,137,5,8,0,0,137,150,3,28,14,13,138,139,5,9,
		0,0,139,150,3,28,14,12,140,141,5,22,0,0,141,142,3,28,14,0,142,143,5,23,
		0,0,143,150,1,0,0,0,144,145,5,33,0,0,145,146,5,27,0,0,146,150,3,28,14,
		10,147,148,5,14,0,0,148,150,3,28,14,9,149,127,1,0,0,0,149,129,1,0,0,0,
		149,130,1,0,0,0,149,131,1,0,0,0,149,136,1,0,0,0,149,138,1,0,0,0,149,140,
		1,0,0,0,149,144,1,0,0,0,149,147,1,0,0,0,150,183,1,0,0,0,151,152,10,15,
		0,0,152,153,7,0,0,0,153,182,3,28,14,16,154,155,10,14,0,0,155,156,7,1,0,
		0,156,182,3,28,14,15,157,158,10,8,0,0,158,159,5,13,0,0,159,182,3,28,14,
		9,160,161,10,7,0,0,161,162,5,12,0,0,162,182,3,28,14,8,163,164,10,6,0,0,
		164,165,5,17,0,0,165,182,3,28,14,7,166,167,10,5,0,0,167,168,5,19,0,0,168,
		182,3,28,14,6,169,170,10,4,0,0,170,171,5,18,0,0,171,182,3,28,14,5,172,
		173,10,3,0,0,173,174,5,20,0,0,174,182,3,28,14,4,175,176,10,2,0,0,176,177,
		5,15,0,0,177,182,3,28,14,3,178,179,10,1,0,0,179,180,5,16,0,0,180,182,3,
		28,14,2,181,151,1,0,0,0,181,154,1,0,0,0,181,157,1,0,0,0,181,160,1,0,0,
		0,181,163,1,0,0,0,181,166,1,0,0,0,181,169,1,0,0,0,181,172,1,0,0,0,181,
		175,1,0,0,0,181,178,1,0,0,0,182,185,1,0,0,0,183,181,1,0,0,0,183,184,1,
		0,0,0,184,29,1,0,0,0,185,183,1,0,0,0,186,188,3,28,14,0,187,189,5,26,0,
		0,188,187,1,0,0,0,188,189,1,0,0,0,189,191,1,0,0,0,190,186,1,0,0,0,191,
		192,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,31,1,0,0,0,194,196,3,22,
		11,0,195,197,5,26,0,0,196,195,1,0,0,0,196,197,1,0,0,0,197,199,1,0,0,0,
		198,194,1,0,0,0,199,200,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,33,
		1,0,0,0,19,36,38,45,51,63,80,89,103,108,114,118,125,149,181,183,188,192,
		196,200
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
