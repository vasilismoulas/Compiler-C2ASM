//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/vasil/OneDrive/Έγγραφα/test/Compiler-C2ASM/C2ASM/testparser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="testparser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface ItestparserVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="testparser.compileUnit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCompileUnit([NotNull] testparser.CompileUnitContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="testparser.globalstatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGlobalstatement([NotNull] testparser.GlobalstatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="testparser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionDeclaration([NotNull] testparser.FunctionDeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>custom_FunctionDefinition</c>
	/// labeled alternative in <see cref="testparser.functionDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCustom_FunctionDefinition([NotNull] testparser.Custom_FunctionDefinitionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="testparser.funprefix"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunprefix([NotNull] testparser.FunprefixContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="testparser.functionbody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionbody([NotNull] testparser.FunctionbodyContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>statement_ExpressionStatement</c>
	/// labeled alternative in <see cref="testparser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement_ExpressionStatement([NotNull] testparser.Statement_ExpressionStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>statement_IfStatement</c>
	/// labeled alternative in <see cref="testparser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement_IfStatement([NotNull] testparser.Statement_IfStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>statement_WhileStatement</c>
	/// labeled alternative in <see cref="testparser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement_WhileStatement([NotNull] testparser.Statement_WhileStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>statement_CompoundStatement</c>
	/// labeled alternative in <see cref="testparser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement_CompoundStatement([NotNull] testparser.Statement_CompoundStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>statement_DataDeclarationStatement</c>
	/// labeled alternative in <see cref="testparser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement_DataDeclarationStatement([NotNull] testparser.Statement_DataDeclarationStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>statement_ReturnStatement</c>
	/// labeled alternative in <see cref="testparser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement_ReturnStatement([NotNull] testparser.Statement_ReturnStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>statement_BreakStatement</c>
	/// labeled alternative in <see cref="testparser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement_BreakStatement([NotNull] testparser.Statement_BreakStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="testparser.ifstatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfstatement([NotNull] testparser.IfstatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="testparser.whilestatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhilestatement([NotNull] testparser.WhilestatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="testparser.compoundStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCompoundStatement([NotNull] testparser.CompoundStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="testparser.statementList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatementList([NotNull] testparser.StatementListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="testparser.datadeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDatadeclaration([NotNull] testparser.DatadeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>datavalue_Number</c>
	/// labeled alternative in <see cref="testparser.datavalue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDatavalue_Number([NotNull] testparser.Datavalue_NumberContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>datavalue_Char</c>
	/// labeled alternative in <see cref="testparser.datavalue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDatavalue_Char([NotNull] testparser.Datavalue_CharContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>typespecifier_IntType</c>
	/// labeled alternative in <see cref="testparser.typespecifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypespecifier_IntType([NotNull] testparser.Typespecifier_IntTypeContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>typespecifier_DoubleType</c>
	/// labeled alternative in <see cref="testparser.typespecifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypespecifier_DoubleType([NotNull] testparser.Typespecifier_DoubleTypeContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>typespecifier_FloatType</c>
	/// labeled alternative in <see cref="testparser.typespecifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypespecifier_FloatType([NotNull] testparser.Typespecifier_FloatTypeContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>typespecifier_CharType</c>
	/// labeled alternative in <see cref="testparser.typespecifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypespecifier_CharType([NotNull] testparser.Typespecifier_CharTypeContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>typespecifier_VoidType</c>
	/// labeled alternative in <see cref="testparser.typespecifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypespecifier_VoidType([NotNull] testparser.Typespecifier_VoidTypeContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expr_PLUSMINUS</c>
	/// labeled alternative in <see cref="testparser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_PLUSMINUS([NotNull] testparser.Expr_PLUSMINUSContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expr_LTE</c>
	/// labeled alternative in <see cref="testparser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_LTE([NotNull] testparser.Expr_LTEContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expr_ASSIGN</c>
	/// labeled alternative in <see cref="testparser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_ASSIGN([NotNull] testparser.Expr_ASSIGNContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expr_LT</c>
	/// labeled alternative in <see cref="testparser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_LT([NotNull] testparser.Expr_LTContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expr_CHAR</c>
	/// labeled alternative in <see cref="testparser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_CHAR([NotNull] testparser.Expr_CHARContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expr_NUMBER</c>
	/// labeled alternative in <see cref="testparser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_NUMBER([NotNull] testparser.Expr_NUMBERContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expr_NEQUAL</c>
	/// labeled alternative in <see cref="testparser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_NEQUAL([NotNull] testparser.Expr_NEQUALContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expr_PLUS</c>
	/// labeled alternative in <see cref="testparser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_PLUS([NotNull] testparser.Expr_PLUSContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expr_EQUAL</c>
	/// labeled alternative in <see cref="testparser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_EQUAL([NotNull] testparser.Expr_EQUALContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expr_GT</c>
	/// labeled alternative in <see cref="testparser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_GT([NotNull] testparser.Expr_GTContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expr_MULDIV</c>
	/// labeled alternative in <see cref="testparser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_MULDIV([NotNull] testparser.Expr_MULDIVContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expr_IDENTIFIER</c>
	/// labeled alternative in <see cref="testparser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_IDENTIFIER([NotNull] testparser.Expr_IDENTIFIERContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expr_MINUS</c>
	/// labeled alternative in <see cref="testparser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_MINUS([NotNull] testparser.Expr_MINUSContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expr_FCALL</c>
	/// labeled alternative in <see cref="testparser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_FCALL([NotNull] testparser.Expr_FCALLContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expr_OR</c>
	/// labeled alternative in <see cref="testparser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_OR([NotNull] testparser.Expr_ORContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expr_PAREN</c>
	/// labeled alternative in <see cref="testparser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_PAREN([NotNull] testparser.Expr_PARENContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expr_NOT</c>
	/// labeled alternative in <see cref="testparser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_NOT([NotNull] testparser.Expr_NOTContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expr_GTE</c>
	/// labeled alternative in <see cref="testparser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_GTE([NotNull] testparser.Expr_GTEContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expr_AND</c>
	/// labeled alternative in <see cref="testparser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_AND([NotNull] testparser.Expr_ANDContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="testparser.args"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArgs([NotNull] testparser.ArgsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="testparser.formalargs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFormalargs([NotNull] testparser.FormalargsContext context);
}
